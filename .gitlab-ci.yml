# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
# Template: https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/ci/templates/dotNET-Core.gitlab-ci.yml

image: alpine:latest

variables:
  # 1) Name of directory where restore and build objects are stored.
  OBJECTS_DIRECTORY: 'obj'
  # 2) Name of directory used for keeping restored dependencies.
  NUGET_PACKAGES_DIRECTORY: '.nuget'
  # 3) A relative path to the source code from project repository root.
  SOURCE_CODE_PATH: 'src/*'

cache:
  # Per-stage and per-branch caching.
  key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
  paths:
    # Specify three paths that should be cached:
    #
    # 1) Main JSON file holding information about package dependency tree, packages versions,
    # frameworks etc. It also holds information where to the dependencies were restored.
    - '$SOURCE_CODE_PATH$OBJECTS_DIRECTORY/project.assets.json'
    # 2) Other NuGet and MSBuild related files. Also needed.
    - '$SOURCE_CODE_PATH$OBJECTS_DIRECTORY/*.csproj.nuget.*'
    # 3) Path to the directory where restored dependencies are kept.
    - '$NUGET_PACKAGES_DIRECTORY'

before_script:
  - apk add dotnet6-sdk
  - apk add git jq nodejs npm
  - npm install -g aws-cdk
  - apk add --no-cache aws-cli 
  - 'dotnet restore ./src --packages $NUGET_PACKAGES_DIRECTORY'
  - dotnet tool restore  

stages:          # List of stages for jobs, and their order of execution  
  - build-and-test
  - deploy-infra

build-job:
  stage: build-and-test
  script:
    - dotnet build ./src --no-restore

automated-test-job:
  stage: build-and-test
  script:
    - echo "installing Junit Logger"
    - dotnet add ./test/AWS.WCF.Extensions.Tests/ package JUnitTestLogger
    - dotnet add ./test/AWS.CoreWCF.Extensions.Tests/ package JUnitTestLogger
    - dotnet add ./test/AWS.Extensions.IntegrationTests/ package JUnitTestLogger
    - echo "Running automated tests..." 
    #https://github.com/spekt/junit.testlogger/blob/master/docs/gitlab-recommendation.mdhttps://stackoverflow.com/questions/57574782/how-to-capture-structured-xunit-test-output-in-gitlab-ci
    - 'dotnet test . --test-adapter-path:. --logger:"junit;LogFilePath=../../artifacts/{assembly}-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose"'
  artifacts:
    when: always
    paths: 
     - ./artifacts/*test-result.xml
    reports:
      junit: 
       - ./artifacts/*test-result.xml

lint-test-job:
  stage: build-and-test
  script:
    - echo "üñ•Ô∏è Using Csharpier to enforce code formating and style."
    - dotnet csharpier --check .

deploy-cdk-job:  # deploys cdk 
  stage: deploy-infra
  environment: production
  rules:
    # only run on push to main
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  variables:
    AWS_CREDS_TARGET_ROLE: $AWS_CREDS_TARGET_ROLE_PROD
    AWS_DEFAULT_REGION: $CDK_DEFAULT_REGION
    ACCOUNT_ID: $CDK_DEFAULT_ACCOUNT_PROD
  script:
    - cdk deploy --require-approval never --outputs-file ./cdk-outputs.json