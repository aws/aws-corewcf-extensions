name: Build and Deploy

on:
  push:
    #branches:
    #- main
  pull_request:
env:
  AWS_REGION : "us-west-2"
# permission can be added at job level or workflow level
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Setup .NET Versions
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: |
          6.0.x
    - name: Install dependencies
      run: |
        dotnet restore
        dotnet tool restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_INTEGRATION_TEST_ROLE }}
        role-session-name: github-cicd
        aws-region: ${{ env.AWS_REGION }}
    - name: Test
      # runs all automated tests
      run: dotnet test --configuration Release --no-restore --verbosity normal
  
  benchmark:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Setup .NET Versions
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: |
          6.0.x
          7.0.x
    - name: Install dependencies
      run: |
        dotnet restore
        dotnet tool restore
        dotnet tool install --add-source ${{ secrets.AWS_BENCHMARK_TOOL_PRIVATE_FEED }} BenchmarkDotnetCliTool
    - name: Prepare Benchmark AWS Config Json
      shell: pwsh
      run: |
        Get-Content benchmark-aws-config.json
        # update config file with values from secrets
        $awsConfigJson = Get-Content benchmark-aws-config.json
        $awsConfigJson = $awsConfigJson.Replace("BENCHMARK_EC2_INSTANCE_PROFILE_ARN", "${{ secrets.AWS_BENCHMARK_EC2_INSTANCE_PROFILE_ARN }}")
        $awsConfigJson = $awsConfigJson.Replace("BENCHMARK_BUCKET_NAME", "${{ secrets.AWS_BENCHMARK_BUCKET_NAME }}")
        $awsConfigJson | Out-File benchmark-aws-config.json
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_BENCHMARK_TEST_ROLE }}
        role-session-name: github-cicd
        aws-region: ${{ env.AWS_REGION }}
    - name: Run Benchmarking
      shell: pwsh
      run: |
        # baseline is the most recent git tag
        $baseline=(git tag -l --sort=-v:refname)[0]
        #performance must degrade by atleast 10% to trigger alarm
        $threshold=10.0
        #dotnet benchmark run aws native ./test/AWS.Extensions.PerformanceTests/AWS.Extensions.PerformanceTests.csproj  --targetApplicationRoot . -o . --tag vNext --baseline $baseline --threshold $threshold -ac ./benchmark-aws-config.json
        dotnet benchmark run aws native ./test/AWS.Extensions.PerformanceTests/AWS.Extensions.PerformanceTests.csproj  --targetApplicationRoot . -o . --tag $baseline -ac benchmark-aws-config.json

  trigger-deploy:
    runs-on: ubuntu-latest
    needs: 
      - build-and-test
      - benchmark
    steps:
    - uses: actions/checkout@v2
      # set fetch-depth to 0 to get full git history, needed for NerdBank GitVersion to caclulate version
      with:
        fetch-depth: 0
    - name: Zip Src
      run: |
        #cd ../
        zip -r AWSCoreWCFServerExtensions.zip .
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_DEPLOYMENT_ROLE }}
        role-session-name: github-cicd
        aws-region: ${{ env.AWS_REGION }}
    - name: Start Deployment Pipeline
      # uploading this zip archive will trigger a CodePipeline that will build, sign, and package
      # the dlls and then publish them to nuget.org
      run: aws s3 cp ./AWSCoreWCFServerExtensions.zip s3://${{ secrets.AWS_DEPLOYMENT_BUCKET_NAME }}/AWSCoreWCFServerExtensions.zip

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Setup .NET Versions
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: |
          6.0.x
    - name: Install dependencies
      run: |
        dotnet restore
        dotnet tool restore
    - name: Lint
      run: dotnet csharpier . --check
